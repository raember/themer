import math
import re
import subprocess
import sys
import termios
import tty
from typing import Tuple


def get_monitor_resolution() -> Tuple[int, int]:
    for line in subprocess.check_output(('xdpyinfo')).decode().split('\n'):
        if 'dimensions:' in line:
            left, right = line.split('x', maxsplit=1)
            width = int(left.rsplit(' ', maxsplit=1)[-1])
            height = int(right.split(' ', maxsplit=1)[0])
            return width, height
    raise Exception("Couldn't find the monitor resolution(s)")


def print_color_table(colors: list[str] = None):
    if colors is None:
        colors = [*list(range(40, 48)), *list(range(100, 108))]
    for name in ['Black', 'Red', 'Green', 'Yellow', 'Blue', 'Magenta', 'Cyan', 'White']:
        print(name.center(9), end='')
    print()
    for row in [colors[:8], colors[8:]]:
        for el in row:
            print(f"\033[{el}m{''.center(9)}\033[m", end='')
        print()


def print_colortest(colors: list[str] = None):
    if colors is None:
        colors = list(map(str, [*list(range(40, 48)), *list(range(100, 108))]))
    bg_names = ['Default', 'Black', 'Red', 'Green', 'Yellow', 'Blue', 'Magenta', 'Cyan', 'L-Gray']
    bg_cols = ['49', *colors[:8]]
    fg_names = ['Default', 'Bold', 'Black', 'Gray', 'Red', 'L-Red', 'Green', 'L-Green', 'Yellow', 'L-Yellow', 'Blue',
                'L-Blue', 'Magenta', 'L-Magenta', 'Cyan', 'L-Cyan', 'L-Gray', 'White']
    fg_cols = ['49', '49;1', colors[0], colors[8], colors[1], colors[9], colors[2], colors[10], colors[3], colors[11],
               colors[4], colors[12], colors[5], colors[13], colors[6], colors[14], colors[7], colors[15]]
    for name in ['', *bg_names]:
        print(name.center(9), end='')
    print()
    for name, fg in zip(fg_names, fg_cols):
        if len(fg) != 0:
            if fg.isdigit():
                fg = str(int(fg) - 10)
            else:
                fg = '3' + fg[1:]
        print(name.rjust(9) + f"\033[{fg}m", end='')
        for bg in bg_cols:
            print(f" \033[{bg}m{'***'.center(7)}\033[49m ", end='')
        print("\033[m")


col256 = {
    # (0x00, 0x00, 0x00): 0,
    # (0x80, 0x00, 0x00): 1,
    # (0x00, 0x80, 0x00): 2,
    # (0x80, 0x80, 0x00): 3,
    # (0x00, 0x00, 0x80): 4,
    # (0x80, 0x00, 0x80): 5,
    # (0x00, 0x80, 0x80): 6,
    # (0xc0, 0xc0, 0xc0): 7,
    # (0x80, 0x80, 0x80): 8,
    # (0xff, 0x00, 0x00): 9,
    # (0x00, 0xff, 0x00): 10,
    # (0xff, 0xff, 0x00): 11,
    # (0x00, 0x00, 0xff): 12,
    # (0xff, 0x00, 0xff): 13,
    # (0x00, 0xff, 0xff): 14,
    # (0xff, 0xff, 0xff): 15,
    (0x00, 0x00, 0x00): 16,
    (0x00, 0x00, 0x5f): 17,
    (0x00, 0x00, 0x87): 18,
    (0x00, 0x00, 0xaf): 19,
    (0x00, 0x00, 0xd7): 20,
    (0x00, 0x00, 0xff): 21,
    (0x00, 0x5f, 0x00): 22,
    (0x00, 0x5f, 0x5f): 23,
    (0x00, 0x5f, 0x87): 24,
    (0x00, 0x5f, 0xaf): 25,
    (0x00, 0x5f, 0xd7): 26,
    (0x00, 0x5f, 0xff): 27,
    (0x00, 0x87, 0x00): 28,
    (0x00, 0x87, 0x5f): 29,
    (0x00, 0x87, 0x87): 30,
    (0x00, 0x87, 0xaf): 31,
    (0x00, 0x87, 0xd7): 32,
    (0x00, 0x87, 0xff): 33,
    (0x00, 0xaf, 0x00): 34,
    (0x00, 0xaf, 0x5f): 35,
    (0x00, 0xaf, 0x87): 36,
    (0x00, 0xaf, 0xaf): 37,
    (0x00, 0xaf, 0xd7): 38,
    (0x00, 0xaf, 0xff): 39,
    (0x00, 0xd7, 0x00): 40,
    (0x00, 0xd7, 0x5f): 41,
    (0x00, 0xd7, 0x87): 42,
    (0x00, 0xd7, 0xaf): 43,
    (0x00, 0xd7, 0xd7): 44,
    (0x00, 0xd7, 0xff): 45,
    (0x00, 0xff, 0x00): 46,
    (0x00, 0xff, 0x5f): 47,
    (0x00, 0xff, 0x87): 48,
    (0x00, 0xff, 0xaf): 49,
    (0x00, 0xff, 0xd7): 50,
    (0x00, 0xff, 0xff): 51,
    (0x5f, 0x00, 0x00): 52,
    (0x5f, 0x00, 0x5f): 53,
    (0x5f, 0x00, 0x87): 54,
    (0x5f, 0x00, 0xaf): 55,
    (0x5f, 0x00, 0xd7): 56,
    (0x5f, 0x00, 0xff): 57,
    (0x5f, 0x5f, 0x00): 58,
    (0x5f, 0x5f, 0x5f): 59,
    (0x5f, 0x5f, 0x87): 60,
    (0x5f, 0x5f, 0xaf): 61,
    (0x5f, 0x5f, 0xd7): 62,
    (0x5f, 0x5f, 0xff): 63,
    (0x5f, 0x87, 0x00): 64,
    (0x5f, 0x87, 0x5f): 65,
    (0x5f, 0x87, 0x87): 66,
    (0x5f, 0x87, 0xaf): 67,
    (0x5f, 0x87, 0xd7): 68,
    (0x5f, 0x87, 0xff): 69,
    (0x5f, 0xaf, 0x00): 70,
    (0x5f, 0xaf, 0x5f): 71,
    (0x5f, 0xaf, 0x87): 72,
    (0x5f, 0xaf, 0xaf): 73,
    (0x5f, 0xaf, 0xd7): 74,
    (0x5f, 0xaf, 0xff): 75,
    (0x5f, 0xd7, 0x00): 76,
    (0x5f, 0xd7, 0x5f): 77,
    (0x5f, 0xd7, 0x87): 78,
    (0x5f, 0xd7, 0xaf): 79,
    (0x5f, 0xd7, 0xd7): 80,
    (0x5f, 0xd7, 0xff): 81,
    (0x5f, 0xff, 0x00): 82,
    (0x5f, 0xff, 0x5f): 83,
    (0x5f, 0xff, 0x87): 84,
    (0x5f, 0xff, 0xaf): 85,
    (0x5f, 0xff, 0xd7): 86,
    (0x5f, 0xff, 0xff): 87,
    (0x87, 0x00, 0x00): 88,
    (0x87, 0x00, 0x5f): 89,
    (0x87, 0x00, 0x87): 90,
    (0x87, 0x00, 0xaf): 91,
    (0x87, 0x00, 0xd7): 92,
    (0x87, 0x00, 0xff): 93,
    (0x87, 0x5f, 0x00): 94,
    (0x87, 0x5f, 0x5f): 95,
    (0x87, 0x5f, 0x87): 96,
    (0x87, 0x5f, 0xaf): 97,
    (0x87, 0x5f, 0xd7): 98,
    (0x87, 0x5f, 0xff): 99,
    (0x87, 0x87, 0x00): 100,
    (0x87, 0x87, 0x5f): 101,
    (0x87, 0x87, 0x87): 102,
    (0x87, 0x87, 0xaf): 103,
    (0x87, 0x87, 0xd7): 104,
    (0x87, 0x87, 0xff): 105,
    (0x87, 0xaf, 0x00): 106,
    (0x87, 0xaf, 0x5f): 107,
    (0x87, 0xaf, 0x87): 108,
    (0x87, 0xaf, 0xaf): 109,
    (0x87, 0xaf, 0xd7): 110,
    (0x87, 0xaf, 0xff): 111,
    (0x87, 0xd7, 0x00): 112,
    (0x87, 0xd7, 0x5f): 113,
    (0x87, 0xd7, 0x87): 114,
    (0x87, 0xd7, 0xaf): 115,
    (0x87, 0xd7, 0xd7): 116,
    (0x87, 0xd7, 0xff): 117,
    (0x87, 0xff, 0x00): 118,
    (0x87, 0xff, 0x5f): 119,
    (0x87, 0xff, 0x87): 120,
    (0x87, 0xff, 0xaf): 121,
    (0x87, 0xff, 0xd7): 122,
    (0x87, 0xff, 0xff): 123,
    (0xaf, 0x00, 0x00): 124,
    (0xaf, 0x00, 0x5f): 125,
    (0xaf, 0x00, 0x87): 126,
    (0xaf, 0x00, 0xaf): 127,
    (0xaf, 0x00, 0xd7): 128,
    (0xaf, 0x00, 0xff): 129,
    (0xaf, 0x5f, 0x00): 130,
    (0xaf, 0x5f, 0x5f): 131,
    (0xaf, 0x5f, 0x87): 132,
    (0xaf, 0x5f, 0xaf): 133,
    (0xaf, 0x5f, 0xd7): 134,
    (0xaf, 0x5f, 0xff): 135,
    (0xaf, 0x87, 0x00): 136,
    (0xaf, 0x87, 0x5f): 137,
    (0xaf, 0x87, 0x87): 138,
    (0xaf, 0x87, 0xaf): 139,
    (0xaf, 0x87, 0xd7): 140,
    (0xaf, 0x87, 0xff): 141,
    (0xaf, 0xaf, 0x00): 142,
    (0xaf, 0xaf, 0x5f): 143,
    (0xaf, 0xaf, 0x87): 144,
    (0xaf, 0xaf, 0xaf): 145,
    (0xaf, 0xaf, 0xd7): 146,
    (0xaf, 0xaf, 0xff): 147,
    (0xaf, 0xd7, 0x00): 148,
    (0xaf, 0xd7, 0x5f): 149,
    (0xaf, 0xd7, 0x87): 150,
    (0xaf, 0xd7, 0xaf): 151,
    (0xaf, 0xd7, 0xd7): 152,
    (0xaf, 0xd7, 0xff): 153,
    (0xaf, 0xff, 0x00): 154,
    (0xaf, 0xff, 0x5f): 155,
    (0xaf, 0xff, 0x87): 156,
    (0xaf, 0xff, 0xaf): 157,
    (0xaf, 0xff, 0xd7): 158,
    (0xaf, 0xff, 0xff): 159,
    (0xd7, 0x00, 0x00): 160,
    (0xd7, 0x00, 0x5f): 161,
    (0xd7, 0x00, 0x87): 162,
    (0xd7, 0x00, 0xaf): 163,
    (0xd7, 0x00, 0xd7): 164,
    (0xd7, 0x00, 0xff): 165,
    (0xd7, 0x5f, 0x00): 166,
    (0xd7, 0x5f, 0x5f): 167,
    (0xd7, 0x5f, 0x87): 168,
    (0xd7, 0x5f, 0xaf): 169,
    (0xd7, 0x5f, 0xd7): 170,
    (0xd7, 0x5f, 0xff): 171,
    (0xd7, 0x87, 0x00): 172,
    (0xd7, 0x87, 0x5f): 173,
    (0xd7, 0x87, 0x87): 174,
    (0xd7, 0x87, 0xaf): 175,
    (0xd7, 0x87, 0xd7): 176,
    (0xd7, 0x87, 0xff): 177,
    (0xd7, 0xaf, 0x00): 178,
    (0xd7, 0xaf, 0x5f): 179,
    (0xd7, 0xaf, 0x87): 180,
    (0xd7, 0xaf, 0xaf): 181,
    (0xd7, 0xaf, 0xd7): 182,
    (0xd7, 0xaf, 0xff): 183,
    (0xd7, 0xd7, 0x00): 184,
    (0xd7, 0xd7, 0x5f): 185,
    (0xd7, 0xd7, 0x87): 186,
    (0xd7, 0xd7, 0xaf): 187,
    (0xd7, 0xd7, 0xd7): 188,
    (0xd7, 0xd7, 0xff): 189,
    (0xd7, 0xff, 0x00): 190,
    (0xd7, 0xff, 0x5f): 191,
    (0xd7, 0xff, 0x87): 192,
    (0xd7, 0xff, 0xaf): 193,
    (0xd7, 0xff, 0xd7): 194,
    (0xd7, 0xff, 0xff): 195,
    (0xff, 0x00, 0x00): 196,
    (0xff, 0x00, 0x5f): 197,
    (0xff, 0x00, 0x87): 198,
    (0xff, 0x00, 0xaf): 199,
    (0xff, 0x00, 0xd7): 200,
    (0xff, 0x00, 0xff): 201,
    (0xff, 0x5f, 0x00): 202,
    (0xff, 0x5f, 0x5f): 203,
    (0xff, 0x5f, 0x87): 204,
    (0xff, 0x5f, 0xaf): 205,
    (0xff, 0x5f, 0xd7): 206,
    (0xff, 0x5f, 0xff): 207,
    (0xff, 0x87, 0x00): 208,
    (0xff, 0x87, 0x5f): 209,
    (0xff, 0x87, 0x87): 210,
    (0xff, 0x87, 0xaf): 211,
    (0xff, 0x87, 0xd7): 212,
    (0xff, 0x87, 0xff): 213,
    (0xff, 0xaf, 0x00): 214,
    (0xff, 0xaf, 0x5f): 215,
    (0xff, 0xaf, 0x87): 216,
    (0xff, 0xaf, 0xaf): 217,
    (0xff, 0xaf, 0xd7): 218,
    (0xff, 0xaf, 0xff): 219,
    (0xff, 0xd7, 0x00): 220,
    (0xff, 0xd7, 0x5f): 221,
    (0xff, 0xd7, 0x87): 222,
    (0xff, 0xd7, 0xaf): 223,
    (0xff, 0xd7, 0xd7): 224,
    (0xff, 0xd7, 0xff): 225,
    (0xff, 0xff, 0x00): 226,
    (0xff, 0xff, 0x5f): 227,
    (0xff, 0xff, 0x87): 228,
    (0xff, 0xff, 0xaf): 229,
    (0xff, 0xff, 0xd7): 230,
    (0xff, 0xff, 0xff): 231,
    (0x08, 0x08, 0x08): 232,
    (0x12, 0x12, 0x12): 233,
    (0x1c, 0x1c, 0x1c): 234,
    (0x26, 0x26, 0x26): 235,
    (0x30, 0x30, 0x30): 236,
    (0x3a, 0x3a, 0x3a): 237,
    (0x44, 0x44, 0x44): 238,
    (0x4e, 0x4e, 0x4e): 239,
    (0x58, 0x58, 0x58): 240,
    (0x62, 0x62, 0x62): 241,
    (0x6c, 0x6c, 0x6c): 242,
    (0x76, 0x76, 0x76): 243,
    (0x80, 0x80, 0x80): 244,
    (0x8a, 0x8a, 0x8a): 245,
    (0x94, 0x94, 0x94): 246,
    (0x9e, 0x9e, 0x9e): 247,
    (0xa8, 0xa8, 0xa8): 248,
    (0xb2, 0xb2, 0xb2): 249,
    (0xbc, 0xbc, 0xbc): 250,
    (0xc6, 0xc6, 0xc6): 251,
    (0xd0, 0xd0, 0xd0): 252,
    (0xda, 0xda, 0xda): 253,
    (0xe4, 0xe4, 0xe4): 254,
    (0xee, 0xee, 0xee): 255,
}


def find_closest_color(l: int, a: int, b: int, other: list[tuple[int, int, int]]) -> tuple[int, int, int]:
    return sorted(other, key=lambda lab: CIEDE2000((l, a, b), lab))[0]


# https://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html?highlight=cvtcolor#cvtcolor
def rgb2lab(r: int, g: int, b: int) -> tuple[int, int, int]:
    x = (r * 0.412453 + g * 0.357580 + b * 0.180423) / 255
    y = (r * 0.212671 + g * 0.715160 + b * 0.072169) / 255
    z = (r * 0.019334 + g * 0.119193 + b * 0.950227) / 25
    x = x / 0.950456
    z = z / 1.088754

    def f(t: float) -> float:
        if t > 0.008856:
            return t ** (1 / 3)
        return 7.787 * t + 16 / 116

    delta = 128
    if y > 0.008856:
        l = 116 * y ** (1 / 3) - 16
    else:
        l = 903.3 * y
    a = 500 * (f(x) - f(y)) + delta
    b = 200 * (f(y) - f(z)) + delta
    return int(l), int(a), int(b)


# https://github.com/lovro-i/CIEDE2000/blob/master/ciede2000.py
def CIEDE2000(Lab_1: tuple[int, int, int], Lab_2: tuple[int, int, int]):
    '''Calculates CIEDE2000 color distance between two CIE L*a*b* colors'''
    C_25_7 = 6103515625  # 25**7

    L1, a1, b1 = Lab_1[0], Lab_1[1], Lab_1[2]
    L2, a2, b2 = Lab_2[0], Lab_2[1], Lab_2[2]
    C1 = math.sqrt(a1 ** 2 + b1 ** 2)
    C2 = math.sqrt(a2 ** 2 + b2 ** 2)
    C_ave = (C1 + C2) / 2
    G = 0.5 * (1 - math.sqrt(C_ave ** 7 / (C_ave ** 7 + C_25_7)))

    L1_, L2_ = L1, L2
    a1_, a2_ = (1 + G) * a1, (1 + G) * a2
    b1_, b2_ = b1, b2

    C1_ = math.sqrt(a1_ ** 2 + b1_ ** 2)
    C2_ = math.sqrt(a2_ ** 2 + b2_ ** 2)

    if b1_ == 0 and a1_ == 0:
        h1_ = 0
    elif a1_ >= 0:
        h1_ = math.atan2(b1_, a1_)
    else:
        h1_ = math.atan2(b1_, a1_) + 2 * math.pi

    if b2_ == 0 and a2_ == 0:
        h2_ = 0
    elif a2_ >= 0:
        h2_ = math.atan2(b2_, a2_)
    else:
        h2_ = math.atan2(b2_, a2_) + 2 * math.pi

    dL_ = L2_ - L1_
    dC_ = C2_ - C1_
    dh_ = h2_ - h1_
    if C1_ * C2_ == 0:
        dh_ = 0
    elif dh_ > math.pi:
        dh_ -= 2 * math.pi
    elif dh_ < -math.pi:
        dh_ += 2 * math.pi
    dH_ = 2 * math.sqrt(C1_ * C2_) * math.sin(dh_ / 2)

    L_ave = (L1_ + L2_) / 2
    C_ave = (C1_ + C2_) / 2

    _dh = abs(h1_ - h2_)
    _sh = h1_ + h2_
    C1C2 = C1_ * C2_

    if _dh <= math.pi and C1C2 != 0:
        h_ave = (h1_ + h2_) / 2
    elif _dh > math.pi and _sh < 2 * math.pi and C1C2 != 0:
        h_ave = (h1_ + h2_) / 2 + math.pi
    elif _dh > math.pi and _sh >= 2 * math.pi and C1C2 != 0:
        h_ave = (h1_ + h2_) / 2 - math.pi
    else:
        h_ave = h1_ + h2_

    T = 1 - 0.17 * math.cos(h_ave - math.pi / 6) + 0.24 * math.cos(2 * h_ave) + 0.32 * math.cos(
        3 * h_ave + math.pi / 30) - 0.2 * math.cos(4 * h_ave - 63 * math.pi / 180)

    h_ave_deg = h_ave * 180 / math.pi
    if h_ave_deg < 0:
        h_ave_deg += 360
    elif h_ave_deg > 360:
        h_ave_deg -= 360
    dTheta = 30 * math.exp(-(((h_ave_deg - 275) / 25) ** 2))

    R_C = 2 * math.sqrt(C_ave ** 7 / (C_ave ** 7 + C_25_7))
    S_C = 1 + 0.045 * C_ave
    S_H = 1 + 0.015 * C_ave * T

    Lm50s = (L_ave - 50) ** 2
    S_L = 1 + 0.015 * Lm50s / math.sqrt(20 + Lm50s)
    R_T = -math.sin(dTheta * math.pi / 90) * R_C

    k_L, k_C, k_H = 1, 1, 1

    f_L = dL_ / k_L / S_L
    f_C = dC_ / k_C / S_C
    f_H = dH_ / k_H / S_H

    dE_00 = math.sqrt(f_L ** 2 + f_C ** 2 + f_H ** 2 + R_T * f_C * f_H)
    return dE_00


def s2rgb(hex_string: str) -> Tuple[int, int, int]:
    hex_string = hex_string.lstrip('#')
    assert len(hex_string) == 6
    return int(hex_string[0:2], 16), int(hex_string[2:4], 16), int(hex_string[4:6], 16)


def rgb2s(r: int, g: int, b: int) -> str:
    return f"#{r:02X}{g:02X}{b:02X}"


def rgb_to_256col_ansi(r: int, g: int, b: int) -> str:
    return f"48;5;{col256[find_closest_color(r, g, b, list(col256.keys()))]}"


def get_cursor_pos():
    buf = ""
    stdin = sys.stdin.fileno()
    try:
        tattr = termios.tcgetattr(stdin)
    except termios.error as e:
        print(f"Not running in a compatible terminal: {e.args[1]}")
        return None, None
    try:
        tty.setcbreak(stdin, termios.TCSANOW)
        sys.stdout.write("\x1b[6n")
        sys.stdout.flush()
        while True:
            buf += sys.stdin.read(1)
            if buf[-1] == "R":
                break
    finally:
        termios.tcsetattr(stdin, termios.TCSANOW, tattr)
    # reading the actual values, but what if a keystroke appears while reading
    # from stdin? As dirty work around, getpos() returns if this fails: None
    try:
        matches = re.match(r"^\x1b\[(\d*);(\d*)R", buf)
        groups = matches.groups()
    except AttributeError:
        return None
    return (int(groups[0]), int(groups[1]))
